[package]
name = "arrow-odbc-py"
version = "0.1.0"
edition = "2024"

# This is only published as part of a python wheel, not as a stand alone crate.
publish = false

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
# Name needs to be identical to python package name
name = "arrow_odbc"
crate-type = ["cdylib"]

[dependencies]
arrow-odbc = "20"
# arrow would be included indirectly using arrow-odbc, but we need to explicitly specify the ffi
# feature.
arrow = { version = "56.1.0", default-features = false, features = ["ffi"] }
stderrlog = "0.6.0"
log = "0.4.27"
widestring = "1.2.0"

[features]

# On linux we assume use of a UTF-8 locale. So we set the narrow features implying that for queries,
# connection strings and error messages the driver and driver manager supply utf8-strings. This
# might also be slightly faster since no transcoding between UTF-8 and UTF-16 is required.
# Overall speed always depends on the driver, but it is reasonable to assume this is faster, more
# importantly, UTF-8 is likely to be more battled tested on these platforms, while UTF-16 is "only"
# required by the standard.

# On windows we can not assume the default locale to be UTF-8, so we compile odbc-api with default
# features implying the use of UTF-16 for queries, connection strings and error messages. This
# should work on any system. However if you would like to use the narrow UTF-8 function calls on
# windows systems you can set this feature flag.
narrow = ["arrow-odbc/narrow"]

# On linux we assume use of a UTF-8 locale. So we set the narrow features implying that for queries,
# connection strings and error messages the driver and driver manager supply utf8-strings. This
# might also be slightly faster since no transcoding between UTF-8 and UTF-16 is required.
# Overall speed always depends on the driver, but it is reasonable to assume this is faster, more
# importantly, UTF-8 is likely to be more battled tested on these platforms, while UTF-16 is "only"
# required by the standard. However, if you are e.g. faced with a driver which does not use UTF-8,
# but only ascii, or want to use the wide functions calls for any other reason on a non-windows
# system you can set the `wide` feature flag to overwrite this behavior.
wide = ["arrow-odbc/wide"]

[profile.release]
# Panics should only be caused by logic errors and are considered bugs
panic = 'abort'
# Link time Optimization
lto = true
